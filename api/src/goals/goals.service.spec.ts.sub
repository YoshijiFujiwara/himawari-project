import { UserEntity } from '../auth/user.entity';
import { Test } from '@nestjs/testing';
import { GoalsService } from './goals.service';
import { GoalRepository } from './goal.repository';

const mockUser = new UserEntity();
mockUser.id = 1;
mockUser.username = 'ひまわり太郎';
mockUser.email = 'himawari@example.com';

const mockGoalRepository = () => ({
  createGoal: jest.fn(),
});

describe('GoalsService', () => {
  let goalsService;
  let goalRepository;

  beforeEach(async () => {
    const module = await Test.createTestingModule({
      providers: [
        GoalsService,
        { provide: GoalRepository, useFactory: mockGoalRepository },
      ],
    }).compile();

    goalsService = await module.get<GoalsService>(GoalsService);
    goalRepository = await module.get<GoalRepository>(GoalRepository);
  });

  describe('createGoal', () => {
    it('goalRepository.create()が呼ばれ、結果が返却', async () => {
      goalRepository.createGoal.mockResolvedValue('とある目標');

      expect(goalRepository.createGoal).not.toHaveBeenCalled();
    });
  });
});
